<!DOCTYPE html>
<html>
<head>
    <title>Everafter Very Public Upload v.05</title>
    <meta name="description" content="An app for real-time photo sharing at weddings and events.">
    <meta name="keywords" content="Event photograph sharing, Photo sharing app, Event planning, Wedding photography,Wedding TV, Wedding screen, TV at wedding, Party photography, Concert photography, Event photo upload, Private photo sharing, Event slideshow, Real-time photo sharing, Best photo sharing app for events, How to collect wedding photos from guests, Real-time slideshow for parties, Secure photo upload for events, Event photography tips and tricks, Crowd-sourced event photography, Photo sharing solutions for event planners, Download event photos in bulk, Private directory for event photos, Share full-resolution photos online, Corporate event photo sharing, Festival photography app, Art gallery opening photography, Charity event photo collection, School event photography, Sports event photo sharing, Family reunion photo app, Church event photography, Trade show photo upload, Virtual event photography">
    <script src="https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1"></script>
    <link rel="stylesheet" href="/css/live.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;300;400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/w3.css">
    <script src="https://kit.fontawesome.com/c72e3efc2c.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script>
      window['__onGCastApiAvailable'] = function(isAvailable) {
        if (isAvailable) {
          initializeCastApi();
        }
      };
    
      function initializeCastApi() {
        cast.framework.CastContext.getInstance().setOptions({
          receiverApplicationId: 'F55D00F6',
          autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED
        });
      }

      function castTab() {
        navigator.mediaDevices.getDisplayMedia({
          video: { cursor: "always" },
          audio: false
        }).then(stream => {
          const castContext = cast.framework.CastContext.getInstance();
          const castSession = castContext.getCurrentSession();

          const videoElement = document.createElement('video');
          videoElement.srcObject = stream;
          videoElement.play();

          const mediaInfo = new chrome.cast.media.MediaInfo(videoElement.src, 'video/mp4');
          mediaInfo.streamType = chrome.cast.media.StreamType.LIVE;
          
          const request = new chrome.cast.media.LoadRequest(mediaInfo);
          castSession.loadMedia(request).then(
            () => { console.log('Tab casting initiated'); },
            errorCode => { console.log('Error code: ' + errorCode); }
          );
        }).catch(error => {
          console.error('Error accessing display media:', error);
        });
      }
    </script>

</head>

<script>

function showhidemainmenu() {
  var x = document.getElementById("sidemenu");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}


</script>

<body> 
  <div id="myDIV">
    <div class="sidemenuwrapper">
      <!-- SIDE MENU STARTS -->
      <button onclick="showhidemainmenu()" class="menu-item"><i class="fa-solid fa-gear" style="color: #f0f0f0;"></i></button>
    </div>
    <div id="sidemenu">
      <a href="javascript:window.location.href=window.location.href" class="menu-item"><i class="fa-solid fa-arrows-rotate" style="color: #f0f0f0;"></i></a>
      <button onclick="myFunction1()" class="menu-item"><i class="fa-regular fa-lightbulb" style="color: #c5c8ce;"></i></button>
      <button onclick="myFunction2()" class="menu-item"><i class="fa-solid fa-lightbulb" style="color: #2a2b2d;"></i></button>
      <button onclick="myFunction3()" class="menu-item"><i class="fa-solid fa-eye" style="color: #c5c8ce;"></i></button>
      <button onclick="toggleModal()" class="menu-item"><i class="fa-solid fa-circle-info" style="color: #f0f0f0;"></i> </button>
      <div class="menu-item castbutton">
        <google-cast-launcher></google-cast-launcher>
      </div>
      <button onclick="castTab()" class="menu-item">Cast Tab</button>
    </div>
  </div>
 


  
 


<script>
  function myFunction1() {
    document.getElementById("myDIV").style.backgroundColor = "white";
  }
  function myFunction2() {
    document.getElementById("myDIV").style.backgroundColor = "black";
  }

  function myFunction3() {
  var x = document.getElementById("blurredmain");
  if (x.style.visibility === "hidden" || x.style.visibility === "") {
    x.style.visibility = "visible";
  } else {
    x.style.visibility = "hidden";
  }
}

function toggleModal() {
  var modal = document.getElementById("id01");
  if (modal.style.display === "block") {
    modal.style.display = "none";
  } else {
    modal.style.display = "block";
  }
}
  </script>




<!-- SIDE MENU ENDS-->


<!-- QR CODE BACKGROUND 

ADD THE CODE TO RENDER THE QR CODE HERE

END QR CODE BACKGROUND -->



<!-- HELP MODAL -->
<div id="id01" class="w3-modal">
  <div class="w3-modal-content w3-animate-opacity w3-card-4">
    <header class="w3-container w3-light-gray"> 
      <span onclick="document.getElementById('id01').style.display='none'" 
      class="w3-button w3-display-topright">&times;</span>
      <h2>Everafter Help</h2>
    </header>
    <div class="w3-container">

      <img src="/images/help_menu_live.png"class="w3-image">
      <br><br>
      <h3>Live Feed Controls</h3>
      <p>Live feed controls can be accessed from the live feed menu which looks like a little grey gear in the top right of the live feed screen.
        Clicking the gear icon toggles the rest of the menu on and off. The idea is that you'd toggle it off while casting the live feed to the main screen, just so it's not a distraction.
      </p>
      <h3>Refreshing the image feed</h3>
      <p>As there can sometimes be hundreds of images uploaded from an event and the uploaded images loop through a cycle, there may be an occasion where a you might not want to wait for an image that was just loaded to loop around to be shown. Clicking refresh will reset the live feed to immediately start again with the last image uploaded being shown first, the second last uploaded to be shown second, etc..  </p>
      
      <img src="/images/help_moderate.png" class="w3-image">
      <h3>The Moderation Panel</h3>
      <p>The moderation panel allows you to delete images from the live feed. Clicking the moderation panel icon will bring up a gallery of every image that has so far been uploaded.
        Each of those images have a small red "X" in their top right corner. Clicking that red "X" will send that image to a deleted folder. The image is not gone forever, it is just no longer visible in the live feed.
        When the event is over and you get your one-click download link, the deleted files will be included in that zip file. 
      </p>
    </div>
    <footer class="w3-container w3-light-gray">
      <p>Everafter 2023</p>
    </footer>
  </div>
</div>


<img src="/images/heartpreloader.png" class="preloader">

<span class="preloader>"<button is="google-cast-button"></button></span>

 
<!-- MAIN IMAGE FEEDS-->
<!-- BLURRED MAIN IMAGE FEEDS--->
<div id="blurredmain">
<div id="blurredMainImage1" class="mainimage_blurred"></div>
<div id="blurredMainImage2" class="mainimage_blurred"></div>
</div> 
<!-- END BLURRED MAIN IMAGE FEEDS-->


     <!-- <h1>Live Feed for User: <%= userId %></h1> -->
    <div id="mainImage1" class="mainImage"></div>
    <div id="mainImage2" class="mainImage"></div>
    <div id="imageFeed" class="imagefeed"></div>

    <!-- END MAIN IMAGE FEEDS-->




</div>

<script>
const userId = "<%= userId %>"; // Make sure this line is at the top of your script


let currentImageIndex = 0;
let imageArray = [];
let currentMainImage = 1; // Start with mainImage1

function fetchLatestImages() {
    fetch(`/get-public-latest-images/${userId}`)
    .then(response => response.json())
    .then(data => {
        imageFeed.innerHTML = '';  // Clear existing thumbnails
        imageArray = data.files;  // Update the image array

        data.files.forEach(file => {
            const imgDiv = document.createElement('div');
            imgDiv.className = 'image-wrapper';

            const img = document.createElement('img');
            img.src = `/eauploads/${userId}/${file}`;
            img.width = 180;
            img.style.padding = '10px';

            const deleteBtn = document.createElement('span');
            deleteBtn.className = 'delete-icon';
            deleteBtn.innerHTML = '<i class="fa-solid fa-delete-left" style="color: #b8141d;"></i>';
            deleteBtn.onclick = () => deleteImage(file);

            imgDiv.appendChild(img);
            imgDiv.appendChild(deleteBtn);

            imageFeed.appendChild(imgDiv);
        });

        updateMainImage();
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function updateMainImage() {
  if (imageArray.length > 0) {
    const mainImage = document.getElementById(`mainImage${currentMainImage}`);
    const blurredMainImage = document.getElementById(`blurredMainImage${currentMainImage}`);
    
    mainImage.style.backgroundImage = `url('/eauploads/${userId}/${imageArray[currentImageIndex]}')`;
    blurredMainImage.style.backgroundImage = `url('/eauploads/${userId}/${imageArray[currentImageIndex]}')`;
    
    mainImage.style.opacity = 1;
    blurredMainImage.style.opacity = 1;

    const otherMainImage = document.getElementById(`mainImage${currentMainImage === 1 ? 2 : 1}`);
    const otherBlurredMainImage = document.getElementById(`blurredMainImage${currentMainImage === 1 ? 2 : 1}`);
    
    otherMainImage.style.opacity = 0;
    otherBlurredMainImage.style.opacity = 0;

    currentMainImage = currentMainImage === 1 ? 2 : 1;
    currentImageIndex = (currentImageIndex + 1) % imageArray.length;
  }
}

function toggleImageFeed() {
  const imageFeed = document.getElementById('imageFeed');
  if (imageFeed.classList.contains('visible')) {
    imageFeed.classList.remove('visible');
  } else {
    imageFeed.classList.add('visible');
  }
}

function deleteImage(imageName) {
  fetch(`/eauploads/${userId}/${imageName}`, {
    method: 'DELETE'
  })
  .then(response => {
    if (response.ok) {
      // Remove the image from the UI
      const imageElements = document.querySelectorAll(`.image-wrapper img[src="/eauploads/${userId}/${imageName}"]`);
      imageElements.forEach(elem => {
        elem.parentElement.remove();
      });
      // Update the main image array
      imageArray = imageArray.filter(file => file !== imageName);
      updateMainImage();
    } else {
      console.error('Failed to delete image');
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
}

// Get the modal
var modal = document.getElementById('id01');

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}


// Fetch latest images every 5 seconds
setInterval(fetchLatestImages, 5000);


    </script>
</body>
</html>
