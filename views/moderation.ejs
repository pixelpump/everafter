<!DOCTYPE html>
<html>
<head>
    <title>Everafter Public Upload</title>
    <link rel="stylesheet" href="/css/moderation.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;300;400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/w3.css">
    <script src="https://kit.fontawesome.com/c72e3efc2c.js" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script type="text/javascript" src="//www.gstatic.com/cast/sdk/libs/caf_receiver/v3/cast_receiver_framework.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">

</head>

<style> 


</style>
<script>



</script>

<body> 

  <div id="myDIV">
    
  

  <div class="sidemenuwrapper">
   <!-- SIDE MENU STARTS-->
   <button onclick="showhidemainmenu()"class="menu-item"title="Toggle this menu"><i class="fa-solid fa-gear" style="color: #f0f0f0;"></i></button>
  </div>
   <div id="sidemenu">
    <a href="javascript:window.location.href=window.location.href" class="menu-item" title="Refresh all the images"><i class="fa-solid fa-arrows-rotate" style="color: #f0f0f0;"></i></a>
    <!-- <a href="javascript:void(0);" onclick="toggleImageFeed()" class="menu-item" title="Toggle Moderation mode"><i class="fa-solid fa-image" style="color: #f0f0f0;"></i></a> -->
    
    <!-- <button onclick="myFunction1()" class="menu-item"title="Set the background to light mode"><i class="fa-regular fa-lightbulb" style="color: #c5c8ce;"></i></button>
    <button onclick="myFunction2()" class="menu-item"title="Set the background to dark mode"><i class="fa-solid fa-lightbulb" style="color: #2a2b2d;"></i></button>
    <button onclick="myFunction3()" class="menu-item"title="Toggle blurred background"><i class="fa-solid fa-eye" style="color: #c5c8ce;"></i></button> -->
    <!--<button onclick="myFunction4()" class="menu-item"title="Toggle shadow effect"><i class="fa-solid fa-images" style="color: #b0b0b0;"></i></button> -->
    <button onclick="toggleFullScreen()" class="menu-item" title="Toggle this page full screen"><i class="fa-solid fa-expand" style="color: #c5c8ce;"></i></i></i></button>
    
    <button onclick="toggleModal()" class="menu-item"title="Open Help"><i class="fa-solid fa-circle-info" style="color: #f0f0f0;"></i> </button>
    

    <button onclick="window.location.href='/dashboard_paid';" class="menu-item"title="Back to your dashboard"><i class="fa-solid fa-screwdriver-wrench" style="color: #858a93;"></i></i> </button>
    

    <!--<div id="moderationContainer">
      <button onclick="toggleModerationMode()">Toggle Moderation Dashboard</button>
      <button onclick="fetchModerationImages()">Refresh Images</button> 
     
    </div> -->
  </div>
 


  
 






<!-- SIDE MENU ENDS-->


<!-- QR CODE BACKGROUND 

ADD THE CODE TO RENDER THE QR CODE HERE

END QR CODE BACKGROUND -->



<!-- HELP MODAL -->
<div id="id01" class="w3-modal">
  <div class="w3-modal-content w3-animate-opacity w3-card-4">
    <header class="w3-container w3-light-gray"> 
      <span onclick="document.getElementById('id01').style.display='none'" 
      class="w3-button w3-display-topright">&times;</span>
      <h2>Everafter Image Moderation Help</h2>
    </header>
    <div class="w3-container">

      <!-- <img src="/images/help_menu_live.png"class="w3-image"> -->
      <br><br>
      <h3>Incoming Image Moderation </h3>
      <p>When image moderation is set to "on" no images that anyone uploads will be viewable on the live feed until they are approved by you. 
      </p>
      <h3>Allowing Images</h3>
      <p> Just click the <i class="fa-solid fa-thumbs-up" style="color: #1ab71d;"></i> green thumbs up at the top right of the corresponding image you'd like to approve and have shown on the live feed. </p>
      
      
      <h3>Rejecting Images</h3>
      <p>Just click the <i class="fa-solid fa-thumbs-down" style="color: #c3131c;"></i> red thumbs down at the top right of the corresponding image you'd like to reject and have NOT shown on the live feed.
      </p>

      <h3>Other Stuff</h3>
      <p>The latest images will always appear at the top of the moderation window. When an image has been approved by you it will be indicated as such by a green outline (indicating that you clicked the green thumbs up icon beside the image), rejected images are outlined in red,
         and images that have yet to be moderated will have no outline at all. If you are wondering why you have no images appearing in the live feed at all, it's likely because you have not approved any yet :) 

      </p>
    </div>
    <footer class="w3-container w3-light-gray">
      <p>Everafter 2023</p>
    </footer>
  </div>
</div>



<img src="/images/heartpreloader.png" class="preloader"> 
 
<!-- MAIN IMAGE FEEDS-->
<!-- BLURRED MAIN IMAGE FEEDS--->
<!-- <div id="blurredmain">
<div id="blurredMainImage1" class="mainimage_blurred"></div>
<div id="blurredMainImage2" class="mainimage_blurred"></div>
</div>  -->
<!-- END BLURRED MAIN IMAGE FEEDS-->


     <!-- <h1>Live Feed for User: <%= userId %></h1> -->
     <div id="mainimagewrap">
    <!--<div id="mainImage1" class="mainImage"></div>
    <div id="mainImage2" class="mainImage"></div> -->
    <div id="imageFeed" class="imagefeed"></div>
  </div>
    <!-- END MAIN IMAGE FEEDS-->




</div>

<script>


// function addModerationButton() {
//   // Create a new button element
//   const btn = document.createElement("button");

//   // Set the button's text content and onclick function
//   btn.textContent = "Toggle Moderation Dashboard";
//   btn.onclick = toggleModerationMode;

//   // Get the imageFeed element
//   const imageFeed = document.getElementById("imageFeed");

//   // Prepend the button to the top of imageFeed
//   if (imageFeed.firstChild) {
//     imageFeed.insertBefore(btn, imageFeed.firstChild);
//   } else {
//     imageFeed.appendChild(btn);
//   }
// }

////image moderation /////////////////////////

const userId = "<%= userId %>"; // Make sure this line is at the top of your script
let isModerationMode = true;
let isModerationEnabled = true; // For turning moderation completely on/off

// Always fetch moderated images for the main feed
function fetchMainFeedImages() {
  if (isModerationEnabled) {
    // Only fetch approved images
    fetch(`/get-moderated-images/${userId}`)
    .then(response => response.json())
    .then(data => {
      renderImages(data);
    });
  } else {
    // Fetch all images when moderation is completely off
    fetch(`/get-all-images/${userId}`)
    .then(response => response.json())
    .then(data => {
      renderImages(data);
    });
  }
}

function renderImages(data) {
  // Update imageArray for main feed
  imageArray = data.files.filter(file => file.status === 'approved').map(file => file.filename);
  
  // Update the main image
  // updateMainImage();  // Uncomment this line if updateMainImage is defined and you want to call it here
}

// function renderImages(data) {
//   // Update imageArray for main feed
//   imageArray = data.files.filter(file => file.status === 'approved').map(file => file.filename);
  
//   // Update the main image
//   updateMainImage(); dsfsdf
// }

// Function to toggle the moderation mode
function toggleModerationMode() {
  isModerationMode = !isModerationMode;
  console.log("Moderation Mode:", isModerationMode);

}

// Function to toggle complete moderation on/off
function toggleModerationEnabled() {
  isModerationEnabled = !isModerationEnabled;
  console.log("Moderation Enabled:", isModerationEnabled);
  fetchMainFeedImages();  // Refresh the main feed
}









// MODERATION /////////////////////////////////////
fetchMainFeedImages();



// Declare imageArray if not already declared
let imageArray = [];




////IMAGE FEED CODE ////
function fetchModerationImages() {
  let url = isModerationMode ? `/get-all-images/${userId}` : `/get-moderated-images/${userId}`;
  fetch(url)
  .then(response => response.json())
  .then(data => {
    console.log("Received data:", data);  // Log received data
    const imageFeed = document.getElementById('imageFeed');
    imageFeed.innerHTML = '';  // Clear existing thumbnails
    
    // Sort the files array based on the timestamp in the filename in descending order
    data.files.sort((a, b) => {
      const timestampA = parseInt(a.filename.split('-')[1], 10);
      const timestampB = parseInt(b.filename.split('-')[1], 10);
      return timestampB - timestampA;
    });
    
    // Update imageArray based on the moderation mode
    if (isModerationMode) {
      imageArray = data.files.map(file => file.filename);
    } else {
      imageArray = data.files.filter(file => file.status === 'approved').map(file => file.filename);
    }
    
    data.files.forEach(file => {
      // Skip rejected images if not in moderation mode
      if (file.status === 'rejected' && !isModerationMode) {
        return;
      } 

      const imgDiv = document.createElement('div');
      imgDiv.className = 'image-wrapper';

      const img = document.createElement('img');
      img.src = `/eauploads/${userId}/${file.filename}`;
      img.width = 280;
      img.style.padding = '10px'; 

     // Add a green border for approved images
      if (file.status === 'approved') {
        img.style.border = '11px solid green';
      }
      
      // Add a red border for rejected images
      if (file.status === 'rejected') {
        img.style.border = '11px solid red';
      }

      imgDiv.appendChild(img);

      if (isModerationMode) {
      const buttonWrapper = document.createElement('div'); // Create new div for buttons
      buttonWrapper.className = 'moderatebuttons'; // Assign class name
      
      const approveBtn = document.createElement('button');
      approveBtn.innerHTML = '<i class="fa-solid fa-thumbs-up" style="color: #1ab71d;"></i>';
      approveBtn.onclick = () => approveImage(file._id);
      buttonWrapper.appendChild(approveBtn); // Append buttons to buttonWrapper instead of imgDiv

      const rejectBtn = document.createElement('button');
      rejectBtn.innerHTML = '<i class="fa-solid fa-thumbs-down" style="color: #c3131c;"></i>';
      rejectBtn.onclick = () => rejectImage(file._id);
      buttonWrapper.appendChild(rejectBtn); // Append buttons to buttonWrapper instead of imgDiv

      imgDiv.appendChild(buttonWrapper); // Append buttonWrapper to imgDiv
    }
      imageFeed.appendChild(imgDiv);
    });

    // Call updateMainImage() to immediately update the main image
    //updateMainImage();
  });
}

// Function to approve an image
function approveImage(imageId) {
  fetch(`/approve-image/${imageId}`, { method: 'POST' })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Refresh the images
      fetchModerationImages();
    }
  });
}

// Function to reject an image
function rejectImage(imageId) {
  fetch(`/reject-image/${imageId}`, { method: 'POST' })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Refresh the images
      fetchModerationImages();
    }
  });
}


     

// document.addEventListener("DOMContentLoaded", function() {
//   addModerationButton();
//   const imageFeed = document.getElementById('imageFeed');
//   console.log("Element:", imageFeed);
//   console.log("Type:", typeof imageFeed);
  
//   if (imageFeed && typeof imageFeed.appendChild === 'function') {
//     // Your existing code
//   } else {
//     console.error("imageFeed is not a DOM element with an appendChild method");
//   }
// });

////end image moderation //////////////////


function myFunction1() {
    document.getElementById("myDIV").style.backgroundColor = "white";
  }
  function myFunction2() {
    document.getElementById("myDIV").style.backgroundColor = "black";
  }

  function myFunction3() {
  var x = document.getElementById("blurredmain");
  if (x.style.visibility === "hidden" || x.style.visibility === "") {
    x.style.visibility = "visible";
  } else {
    x.style.visibility = "hidden";
  }
}
function myFunction4() {
  var x = document.getElementById("mainimagewrap");
  if (x.style.visibility === "hidden" || x.style.visibility === "") {
    x.style.visibility = "visible";
  } else {
    x.style.visibility = "hidden";
  }
}




function toggleModal() {
  var modal = document.getElementById("id01");
  if (modal.style.display === "block") {
    modal.style.display = "none";
  } else {
    modal.style.display = "block";
  }
}


function toggleFullScreen() {
  if ((document.fullScreenElement && document.fullScreenElement !== null) ||    
   (!document.mozFullScreen && !document.webkitIsFullScreen)) {
    if (document.documentElement.requestFullScreen) {  
      document.documentElement.requestFullScreen();  
    } else if (document.documentElement.mozRequestFullScreen) {  
      document.documentElement.mozRequestFullScreen();  
    } else if (document.documentElement.webkitRequestFullScreen) {  
      document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);  
    }  
  } else {  
    if (document.cancelFullScreen) {  
      document.cancelFullScreen();  
    } else if (document.mozCancelFullScreen) {  
      document.mozCancelFullScreen();  
    } else if (document.webkitCancelFullScreen) {  
      document.webkitCancelFullScreen();  
    }  
  }  
}


function showhidemainmenu() {
  var x = document.getElementById("sidemenu");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}


let currentImageIndex = 0;

let currentMainImage = 1; // Start with mainImage1







/////////////////////////////////Toggle the Image Feed Div ///////////////////////////////////////////////
function toggleImageFeed() {
 const imageFeed = document.getElementById('imageFeed');
  if (imageFeed.classList.contains('visible')) {
    imageFeed.classList.remove('visible');
  } else {
  imageFeed.classList.add('visible');
  }
 }





// Get the modal
var modal = document.getElementById('id01');

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}


// Fetch latest images every 5 seconds
setInterval(fetchModerationImages, 2000);


    </script>

</body>
</html>